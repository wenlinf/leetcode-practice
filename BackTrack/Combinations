class Solution {
    public List<List<Integer>> combine(int n, int k) {
        this.n = n; 
        this.k = k;
        backtrack(1, new LinkedList<>());
        return result;
    }
    
    private List<List<Integer>> result = new ArrayList<>();
    private int k;
    private int n;
    
    private void backtrack(int index, LinkedList<Integer> path) {
        if (path.size() == k) {
            this.result.add(new LinkedList<>(path));
            return;
        }
        for (int i = index; i <= n; i++) {
            path.add(i);
            backtrack(i + 1, path);
            path.removeLast();
        }
    }
}
