class LRUCache {

    private HashMap<Integer, Integer> map;
    private int capacity;
    
    public LRUCache(int capacity) {
        this.map = new LinkedHashMap<>();
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if (!this.map.containsKey(key)) {
            return -1;
        }
        int val = this.map.get(key);
        this.map.remove(key);
        this.map.put(key, val);
        return val;
    }
    
    private void deleteFirst() {
        for (Map.Entry<Integer, Integer> entry : this.map.entrySet()) {
            map.remove(entry.getKey());
            break;
        }
    }
    
    public void put(int key, int value) {
        if (this.get(key) != -1) {
            this.map.put(key, value);
            return;
        }
        if (this.map.size() == this.capacity) {     
            this.deleteFirst();   
        }
        this.map.put(key, value);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
